-- insert error log
CREATE OR REPLACE PROCEDURE CREATE_ERROR_LOG (
    P_PROCEDURE_NAME T_OP_SR_ERROR_LOG.PROCEDURE_NAME%TYPE,
    P_ERROR_CODE     T_OP_SR_ERROR_LOG.ERROR_CODE%TYPE,
    P_ERROR_MESSAGE  T_OP_SR_ERROR_LOG.ERROR_MESSAGE%TYPE
) IS
BEGIN
    INSERT INTO T_OP_SR_ERROR_LOG (
        PROCEDURE_NAME,
        USER_NAME,
        ERROR_DATE,
        ERROR_CODE,
        ERROR_MESSAGE
    ) VALUES (
        P_PROCEDURE_NAME,
        USER,
        SYSDATE,
        P_ERROR_CODE,
        P_ERROR_MESSAGE
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao cadastrar log: ' || SQLERRM);
END CREATE_ERROR_LOG;

-- insert user
CREATE OR REPLACE PROCEDURE CREATE_USER (
    P_USER_NAME    T_OP_SR_USER.USER_NAME%TYPE,
    P_PHONE_NUMBER T_OP_SR_USER.PHONE_NUMBER%TYPE,
    P_XP           T_OP_SR_USER.XP%TYPE,
    P_ID_AUTH      T_OP_SR_USER.ID_AUTH%TYPE
) IS
    PARENT_KEY_NOT_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT ( PARENT_KEY_NOT_FOUND, -02291 );
BEGIN
    INSERT INTO T_OP_SR_USER (
        USER_NAME,
        PHONE_NUMBER,
        XP,
        ID_AUTH
    ) VALUES (
        P_USER_NAME,
        P_PHONE_NUMBER,
        P_XP,
        P_ID_AUTH
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_user', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar user: Tipo de atributo invalido');
    WHEN PARENT_KEY_NOT_FOUND THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_user', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar user: Chave estrangeira nao existe');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_user', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar user: ' || SQLERRM);
END CREATE_USER;



-- validate email
CREATE OR REPLACE FUNCTION IS_VALID_EMAIL (
    EMAIL IN VARCHAR2
) RETURN BOOLEAN IS
    REGEX_EMAIL VARCHAR2(255) := '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$';
    RESPOSTA    BOOLEAN := REGEXP_LIKE(EMAIL, REGEX_EMAIL);
BEGIN
    RETURN RESPOSTA;
END IS_VALID_EMAIL;



-- insert auth
CREATE OR REPLACE PROCEDURE CREATE_AUTH (
    P_ID_AUTH T_OP_SR_USER.USER_NAME%TYPE,
    P_EMAIL   T_OP_SR_USER.PHONE_NUMBER%TYPE
) IS
    EMAIL_INVALID EXCEPTION;
    PRAGMA EXCEPTION_INIT ( EMAIL_INVALID, -20010 );
BEGIN
    IF NOT IS_VALID_EMAIL(P_EMAIL) THEN
        RAISE_APPLICATION_ERROR(-20010, 'Erro na validacao do email: formato invalido');
    END IF;
    INSERT INTO T_OP_SR_AUTH (
        ID_AUTH,
        EMAIL
    ) VALUES (
        P_ID_AUTH,
        P_EMAIL
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_auth', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar auth: Tipo de atributo invalido');
    WHEN EMAIL_INVALID THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_auth', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar auth: Email invalido');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_auth', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar auth: ' || SQLERRM);
END CREATE_AUTH;

--insert likes
CREATE OR REPLACE PROCEDURE CREATE_LIKES (
    P_ID_POST T_OP_SR_LIKES.ID_POST%TYPE,
    P_ID_USER T_OP_SR_LIKES.ID_USER%TYPE
) IS
    PARENT_KEY_NOT_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT ( PARENT_KEY_NOT_FOUND, -02291 );
BEGIN
    INSERT INTO T_OP_SR_LIKES (
        ID_POST,
        ID_USER
    ) VALUES (
        P_ID_USER,
        P_ID_POST
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_likes', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar likes: Tipo de atributo invalido');
    WHEN PARENT_KEY_NOT_FOUND THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_likes', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar likes: Chave estrangeira nao existe');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_likes', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar likes: ' || SQLERRM);
END CREATE_LIKES;



-- Funcao que valida se eh um lat ou lon valido
CREATE OR REPLACE FUNCTION LAT_LON_ISVALID (
    LAT IN DECIMAL,
	LON IN DECIMAL
) RETURN BOOLEAN IS
    RESPOSTA BOOLEAN := (LAT > -91 AND LAT < 91) AND (LON > -181 AND LON < 181);
BEGIN
    RETURN RESPOSTA;
END LAT_LON_ISVALID;




--insert location
CREATE OR REPLACE PROCEDURE CREATE_LOCATION (
    P_LAT         T_OP_SR_LOCATION.LAT%TYPE,
    P_LON         T_OP_SR_LOCATION.LON%TYPE
) IS
     LAT_LON_INVALID EXCEPTION;
    PRAGMA EXCEPTION_INIT ( LAT_LON_INVALID, -20011 );
BEGIN
	IF NOT LAT_LON_ISVALID(P_LAT, P_LON) THEN
        RAISE_APPLICATION_ERROR(-20011, 'Erro na validacao da lat ou lon: formato invalido');
    END IF;
    INSERT INTO T_OP_SR_LOCATION (
        LAT,
        LON
    ) VALUES (
        P_LAT,
        P_LON
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_location', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar location: Tipo de atributo invalido');
    WHEN LAT_LON_INVALID THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_location', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar location: LAT ou LON invalido');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_location', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar location: ' || SQLERRM);
END CREATE_LOCATION;

--insert report
CREATE OR REPLACE PROCEDURE CREATE_REPORT (
    P_DESC_REPORT T_OP_SR_REPORT.DESC_REPORT%TYPE,
    P_DATE_REPORT T_OP_SR_REPORT.DATE_REPORT%TYPE,
    P_APPROVED    T_OP_SR_REPORT.APPROVED%TYPE,
    P_CATEGORY    T_OP_SR_REPORT.CATEGORY%TYPE,
    P_ID_USER     T_OP_SR_REPORT.ID_USER%TYPE,
    P_ID_LOCATION T_OP_SR_REPORT.ID_LOCATION%TYPE
) IS
    PARENT_KEY_NOT_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT ( PARENT_KEY_NOT_FOUND, -02291 );
BEGIN
    INSERT INTO T_OP_SR_REPORT (
        DESC_REPORT,
        DATE_REPORT,
        APPROVED,
        "CATEGORY",
        ID_USER,
        ID_LOCATION
    ) VALUES (
        P_DESC_REPORT,
        P_DATE_REPORT,
        P_APPROVED,
        P_CATEGORY,
        P_ID_USER,
        p_ID_LOCATION
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_report', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar report: Tipo de atributo invalido');
    WHEN PARENT_KEY_NOT_FOUND THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_report', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar report: Chave estrangeira nao existe');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_report', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar report: ' || SQLERRM);
END CREATE_REPORT;


--insert post
CREATE OR REPLACE PROCEDURE CREATE_POST (
    P_CONTENT_POST T_OP_SR_POST.CONTENT_POST%TYPE,
    P_DATE_POST    T_OP_SR_POST.DATE_POST%TYPE
) IS
    NULL_EXCEPTION EXCEPTION;
    PRAGMA EXCEPTION_INIT ( NULL_EXCEPTION, -01400 );
BEGIN
    INSERT INTO T_OP_SR_POST (
        CONTENT_POST,
        DATE_POST
    ) VALUES (
        P_CONTENT_POST,
        P_DATE_POST
    );

    COMMIT;
EXCEPTION
    WHEN VALUE_ERROR THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_post', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20001, 'Erro ao criar post: Tipo de atributo invalido');
    WHEN NULL_EXCEPTION THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_post', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao criar post: Nao pode ser nulo');
    WHEN OTHERS THEN
        ROLLBACK;
        CREATE_ERROR_LOG('create_post', SQLCODE, SQLERRM);
        RAISE_APPLICATION_ERROR(-20003, 'Erro ao criar post: ' || SQLERRM);
END CREATE_POST;

EXEC CREATE_AUTH('DAHIDWIDJPAKSD811DUI2', 'leo@email.com');
EXEC CREATE_USER('Leonardo', '11 90000000', 100, 'DAHIDWIDJPAKSD811DUI2');
EXEC CREATE_LOCATION(41,101.32);
EXEC CREATE_REPORT('DESC', SYSDATE, 0, 2, 1, 1);
EXEC CREATE_POST('CONTENT', SYSDATE);
EXEC CREATE_LIKES(1,1);